<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through Gogle Tag Manager.
 */

/**
 * Implements hook_init().
 * Adds the Google Tag Manager e-commerce tracking code.
 */
function uc_gtm_init($main = 0) {
  // Check to see if we are at the order completion page.
  if (uc_gtm_display()) {
    // If so, then if we can load the order...
    if (!empty($_SESSION['ucgtm_order_id']) && $order = uc_order_load($_SESSION['ucgtm_order_id'])) {
      // Build the GTM tracking code.
      $script = uc_gtm_ecommerce_js($order);

      // Add the code to the header.
      drupal_add_js($script, 'inline', 'header');
    }

    // Clean out the session variable.
    unset($_SESSION['ucgtm_order_id']);
  }
}

/**
 * Implements hook_order().
 */
function uc_gtm_order($op, $arg1, $arg2) {
  // If a new order is created during the checkout process...
  if ($op == 'new' && arg(0) == 'cart') {
    // Store the order ID for later use.
    $_SESSION['ucgtm_order_id'] = $arg1->order_id;
  }
}

/**
 * Determine whether or not to display the e-commerce related JS in the GTM data layer.
 *
 * @return
 *   TRUE or FALSE indicating whether or not to display the GA e-commerce JS.
 */
function uc_gtm_display() {
  // Display the GA e-commerce JS if the URL is cart/checkout/complete...
  if (arg(0) == 'cart' && arg(1) == 'checkout' && arg(2) == 'complete') {
    return TRUE;
  }

  // Or if the URL is the custom completion page.
  $completion_page = variable_get('uc_cart_checkout_complete_page', '');

  if (!empty($completion_page) && $completion_page == drupal_get_path_alias($_GET['q'])) {
    return TRUE;
  }

  // Or if another module says this is the page through hook_ucgtm_display().
  foreach (module_invoke_all('ucgtm_display') as $result) {
    if ($result === TRUE) {
      return TRUE;
    }
  }

  // Otherwise return FALSE.
  return FALSE;
}

/**
 * Build the e-commerce JS passed to Google Tag Manager for order tracking.
 *
 * @param $order
 *   The fully loaded order object to convert into GTM data layer JS.
 * @return
 *   The JS that should be added to the page header.
 */
function uc_gtm_ecommerce_js($order) {
  // Lookup the name of the country or default to the ID if it can't be found
  // for some reason.
  if ($country_data = uc_get_country_data(array('country_id' => $order->billing_country))) {
    $order->billing_country_name = $country_data[0]['country_name'];
  }
  else {
    $order->billing_country_name = $order->billing_country;
  }

  // Lookup the name of the zone.
  $order->billing_zone_name = uc_zone_get_by_id($order->billing_zone);

  // Calculate order tax and shipping totals.
  $order->tax_total = 0;
  $order->shipping_total = 0;

  foreach ($order->line_items as $line_item) {
    if ($line_item['type'] == 'tax') {
      $order->tax_total += $line_item['amount'];
    }
    elseif ($line_item['type'] == 'shipping') {
      $order->shipping_total += $line_item['amount'];
    }
  }

  // Build the transaction arguments.
  $trans = array(
    'order_id' => $order->order_id,
    'store' => variable_get('uc_store_name', variable_get('site_name', 'Ubercart')),
    'total' => $order->order_total,
    'tax' => $order->tax_total,
    'shipping' => $order->shipping_total,
    'city' => $order->billing_city,
    'state' => $order->billing_zone_name,
    'country' => $order->billing_country_name,
  );

  // Allow modules to alter the transaction arguments.
  drupal_alter('ucgtm_trans', $trans, $order);
  
  // Build code to push the order info.
  $script .= "dataLayer = [{";
  $script .= "'transactionId': '" . $trans['order_id'] . "',";
  $script .= "'transactionAffiliation': '" . drupal_to_js($trans['store']) . "',";
  $script .= "'transactionTotal': " . $trans['total'] . ",";
  $script .= "'transactionTax': " . $trans['tax'] . ",";
  $script .= "'transactionShipping': " . $trans['shipping'] . ",";
  $script .= "'transactionProducts': [{";

  // Loop through the products on the order.
  $i = 1;
  foreach ($order->products as $product) {
    $product->category = '';

    // Try to find a category (term) for the product. Since products most often
    // only have one category, the first one returned (based on tid) is chosen.
    if (module_exists('taxonomy')) {
      $terms = taxonomy_node_get_terms(node_load($product->nid));
      if (count($terms)) {
        $term = array_shift($terms);
        $product->category = $term->name;
      }
    }
    if (empty($product->category)) {
      $product->category = t('No category');
    }

    // Build the item arguments.
    $item = array(
      'order_id' => $order->order_id,
      'sku' => $product->model,
      'name' => $product->title,
      'category' => $product->category,
      'price' => $product->price,
      'qty' => $product->qty,
    );

    // Allow modules to alter the item arguments.
    drupal_alter('ucgtm_item', $item, $product, $trans, $order);

      // Create a context for uc_price
      $context = array(
      'revision' => 'altered',
      'type' => 'order_product',
      'caller' => 'uc_gtm',
      'subject' => array(
         'order_product' => $product,
         'order' => $order,
         'node' => node_load($product->nid),
      ),
    );

    // Build out the dataLayer array for this product
    $script .= "'sku': " . drupal_to_js($item['sku']) . ",";
    $script .= "'name': " . drupal_to_js($item['name']) . ",";
    $script .= "'category': " . drupal_to_js((string) $item['category']) . ",";
    $script .= "'price': " . uc_price($item['price'], $context) . ",";
    $script .= "'quantity': " . $item['qty'];
    // Add a close brace for multiple products
    if(count($order->products) > $i) {
      $script .= '},{';
    }
    $i++;
  }
  
  // Close out the dataLayer array
  $script .= "}]"; // products
  $script .= "}]"; // entire array
  
  return $script;
}
